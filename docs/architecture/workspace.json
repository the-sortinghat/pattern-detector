{
  "id" : 1,
  "name" : "Name",
  "description" : "Description",
  "lastModifiedDate" : "2023-10-17T09:34:55Z",
  "properties" : {
    "structurizr.dsl" : "d29ya3NwYWNlIHsKICAgICFhZHJzIGRlY2lzaW9ucwp9Cg=="
  },
  "configuration" : { },
  "model" : { },
  "documentation" : {
    "decisions" : [ {
      "content" : "# 11. Presets treated as configuration instead of code\n\nDate: 2023-10-17\n\n## Status\n\nProposed\n\nImproves [10. User can specify a preset](#10)\n\n## Context\n\nPresets combine a set of detectors to be helpful for the users.\nAs a simple combination of detectors, there's no need to recompile the code to add new presets.\n\n## Decision\n\nPresets are treated as configuration, instead of being defined in code.\n\n## Consequences\n\nIt's easier to change the presets without recompiling the code.\nOn startup, it requires pre-processing of configuration before presets are available to use.\n",
      "format" : "Markdown",
      "id" : "11",
      "title" : "Presets treated as configuration instead of code",
      "date" : "2023-10-17T00:00:00Z",
      "status" : "Proposed",
      "links" : [ {
        "id" : "10",
        "description" : "Improves"
      } ]
    }, {
      "content" : "# 1. Record architecture decisions\n\nDate: 2023-10-16\n\n## Status\n\nAccepted\n\n## Context\n\nWe need to record the architectural decisions made on this project.\n\n## Decision\n\nWe will use Architecture Decision Records, as [described by Michael Nygard](http://thinkrelevance.com/blog/2011/11/15/documenting-architecture-decisions).\n\n## Consequences\n\nSee Michael Nygard's article, linked above. For a lightweight ADR toolset, see Nat Pryce's [adr-tools](https://github.com/npryce/adr-tools).\n",
      "format" : "Markdown",
      "id" : "1",
      "title" : "Record architecture decisions",
      "date" : "2023-10-16T00:00:00Z",
      "status" : "Accepted"
    }, {
      "content" : "# 2. Use Gradle multi-project\n\nDate: 2023-10-16\n\n## Status\n\nAccepted\n\n## Context\n\nWe envision a considerable growth in the project.\nSeparating modules allows independent builds.\n\n## Decision\n\nSplit the code-base into different Gradle projects\n\n## Consequences\n\nFaster builds due to a more granular access to it.\nTeam-wise scalability is improved.\n\n## Illustration\n\nRelationship between the Gradle projects\n\n![modules diagram](./../diagrams/usvision-docs-modules.png)",
      "format" : "Markdown",
      "id" : "2",
      "title" : "Use Gradle multi-project",
      "date" : "2023-10-16T00:00:00Z",
      "status" : "Accepted"
    }, {
      "content" : "# 3. Use a Document-based database\n\nDate: 2023-10-16\n\n## Status\n\nAccepted\n\n## Context\n\nSQL databases are support transactions and are less space-consuming.\nDocument-modelled NoSQL DBMSs usually support very performant reading operations -- at the expense of data replication.\n\n## Decision\n\nUse MongoDB (Document-based database) as BDMS.\n\n## Consequences\n\nPerformant reading operations.\nRelies on data replication, so consumes more space as a resource.\nIt's harder to support transactions.\n",
      "format" : "Markdown",
      "id" : "3",
      "title" : "Use a Document-based database",
      "date" : "2023-10-16T00:00:00Z",
      "status" : "Accepted"
    }, {
      "content" : "# 4. Separate reading and writing operations into different modules\n\nDate: 2023-10-16\n\n## Status\n\nProposed\n\n## Context\n\nReading and writing operations in this application follow two different workflows.\nNFRs for each operation varies.\n\n## Decision\n\nSeparate reading and writing operations into different modules of the application.\n\n## Consequences\n\nMaintenance of each can be done independently from each other.\nThere might be code duplication or replication.\nWhenever there's the need to synchronize changes into those modules, it'll be more difficult.\n",
      "format" : "Markdown",
      "id" : "4",
      "title" : "Separate reading and writing operations into different modules",
      "date" : "2023-10-16T00:00:00Z",
      "status" : "Proposed"
    }, {
      "content" : "# 5. Homogeneously analyze Systems and Microservices\n\nDate: 2023-10-16\n\n## Status\n\nAccepted\n\n## Context\n\nArchitectural structures that are present in a microservice usually affect its surroundings.\nMicroservices and Systems of Microservices can be perceived as different levels of the same abstraction.\n\n## Decision\n\nImplement CompanySystem and Microservice as classes that belong to the same Composite.\n\n## Consequences\n\nAnalyses and detections can be targeted to perform on either one.\nIt's still possible to run analyses or detections into each one specifically.\nSome of the algorithms become recursive, which can be perceived as more complex.\n\n## Illustration\n\nClasses diagram of the module `app-model`. There are three regions in this diagram:\n\n- the business abstractions to model the domain\n  - CompanySystem\n  - Microservice\n  - Operation\n  - Message Channel\n  - Database\n- the Composite pattern to treat homogeneously the abstractions\n  - System (the component)\n  - System of Systems (the composite)\n  - System of Components (the leaf)\n- the Visitor pattern to allow seamless addition of behavior to the model without the need to change its classes\n  - Visitable\n  - Visitor\n\n![classes diagram of app-model](./../diagrams/usvision-docs-classes_model.png)",
      "format" : "Markdown",
      "id" : "5",
      "title" : "Homogeneously analyze Systems and Microservices",
      "date" : "2023-10-16T00:00:00Z",
      "status" : "Accepted"
    }, {
      "content" : "# 6. Specialize classes for analyzing metrics\n\nDate: 2023-10-16\n\n## Status\n\nAccepted\n\n## Context\n\nA series of metrics are going to be measured in the application.\nThere are metrics that can be evaluated independently from each other.\nThere are metrics that might depend on other metrics.\n\n## Decision\n\nImplement each metric as a specific class, that might have an uniform interface.\n\n## Consequences\n\nThe number of classes grow at the same rate as new types of metrics are evaluated.\nIt's easier to reuse existing metrics.\nIt's possible to evaluate just a subset of the metrics.\n",
      "format" : "Markdown",
      "id" : "6",
      "title" : "Specialize classes for analyzing metrics",
      "date" : "2023-10-16T00:00:00Z",
      "status" : "Accepted"
    }, {
      "content" : "# 7. Detection depends exclusively on metrics\n\nDate: 2023-10-16\n\n## Status\n\nAccepted\n\n## Context\n\nThe tool follow a metric-based approach.\nAnalyses can be done on the model in different shapes, such as metrics and structural features.\n\n## Decision\n\nDetections depend exclusively on metric and results of analyses.\n\n## Consequences\n\nDetections are decoupled from the model, supported solely by the results of the analyses.\nThis requires a broader set of analyses to be available, not only metrics but also structural features.\n\n## Illustration\n\nSequence diagram and a dependency matrix of the reports generation. This process triggers the analyzers and the detectors.\n\nIt's important to notice there's no connection between a Detector and a System. In the diagram, you can notice there's no calls between Detector and System; in the matrix, in the column \"Detector\" the cell in the row \"System\" is empty.\n\n![sequence diagram of the generation of reports](./../diagrams/usvision-docs-seq_reports.png)\n\n|                   | Report Supervisor | Planner | Executioner | System | Detector | Analyzer |\n|-------------------|-------------------|---------|-------------|--------|----------|---------|\n| Report Supervisor | -                 |         |             |        |          |         |\n| Planner           | 1                 | -       |             |        |          |         |\n| Executioner       | 1                 |         | -           |        |          |         |\n| System            |                   |         | 1           | -      |          |         |\n| Detector          |                   | 1       | 2           |        | -        |         |\n| Analyzer          |                   | 1       |             | 1      | 1        | -       |\n\n\n## How to create a new detection\n\nDetection is based solely on the results of analyses -- directly or indirectly --, and they can generate a variety of results, such as patterns and bad smells. More basic detections depend directly on the results of some analyses, but there might be some more complex detections that also benefit from other detections.\n\nWhatever degree of complexity your new detection has, you only need to create a new class that extends the `Detector` abstract class, that takes in its constructor all the `Analyzer`s and `Detector`s it depends on, and, as outcome of the `getResults` method, provides an implementation of `ArchitecturalInsight`. The diagram below shows what is currently implemented.\n\n> All the detectors **must be placed inside the com.usvision.analyses.detector package** otherwise it won't be available for the external clients\n\n![class diagram of the analyses and detections](./../diagrams/usvision-docs-classes_analyses.png)",
      "format" : "Markdown",
      "id" : "7",
      "title" : "Detection depends exclusively on metrics",
      "date" : "2023-10-16T00:00:00Z",
      "status" : "Accepted"
    }, {
      "content" : "# 8. Metric evaluation is separated from the model\n\nDate: 2023-10-17\n\n## Status\n\nAccepted\n\n## Context\n\nMetric evaluation is an important task of the application.\nThere are a few metrics so far, but there's an expectation to be more in the future.\nFor this application, there are different NFRs for metric evaluation from the model ones.\n\n## Decision\n\nMetric evaluation is separated from the model.\n\n## Consequences\n\nChanges in the metrics don't affect the model, hence there's more isolation for both sides.\nFrom that, we achieve more cohesive classes in the model and in the metric evaluation.\nThe model must provide an extensible access point, such as the Visitor pattern.\n\n## Illustration\n\nWe present the classes diagram of the two modules involved in this decision: the `app-model`, and the `app-analyses`. In the first, it's important to highlight the model being abstracted by the interface `Visitable`, which has a relationship with `Visitor`. In the second, the interface `Analyzer` represent the metrics evaluation. It's not explicitly represented, but the interface `Analyzer` extends `Visitor`, which is the connection point between the two modules. Because of this decision, the model only needs to be aware of the `Visitor`.\n\n![classes diagram of the model](./../diagrams/usvision-docs-classes_model.png)\n\n![classes diagram of the analyses](./../diagrams/usvision-docs-classes_analyses.png)\n\n\n## How to create a new metric evaluation\n\nIn this application, a metric evaluation is not the only analysis we make on the model. We also support other structural information collection. Because of that, we created a generalization, an interface called `Analyzer`. There are already three interfaces extending it, they are:\n\n- `Measurer` represents the objective metrics, such as `NumberOfExposedOperations`;\n- `RelationshipAnalyzer` collects information about singular relationships between parts of the model, e.g. the `MicroserviceBelongingAnalyzer` that identified to which CompanySystem a Microservice belongs;\n- `RelationshipsAnalyzer` is very similar to the analyzer above, except that this one collects information about relationships where there might be multiplicity, e.g. the `DatabaseUsage` where there might be multiple Microservices using multiple Databases.\n\nTo create a new analysis, you'll need to create a concrete class that implements `Analyzer`. You can either choose to implement one of the interfaces above, or to create a new abstraction before. Either way, it's imperative that you create a new class that, directly or indirectly, implements `Analyzer`.\n\n> Your new analyzer will only be called when a detector requires its data\n\n",
      "format" : "Markdown",
      "id" : "8",
      "title" : "Metric evaluation is separated from the model",
      "date" : "2023-10-17T00:00:00Z",
      "status" : "Accepted"
    }, {
      "content" : "# 9. Detections can be required in a granular way\n\nDate: 2023-10-17\n\n## Status\n\nAccepted\n\nImproved by [10. User can specify a preset](#10)\n\n## Context\n\nAs the number of detections grows, there might be unrelated ones.\nIt's important to give more control to the client in terms of selecting which detections they want.\n\n## Decision\n\nDetections can be required in a granular way\n\n## Consequences\n\nRequiring detections is not a all-or-nothing process.\nDifferent requests will typically have different detections, so it becomes important to plan the executions to avoid wasting resources in processing.\n\n\n## Illustration\n\nHere's a class diagram representing the structure of the `app-reports` module. The `ReportSupervisor` is the main class, that controls the entire workflow by delegating tasks to specific classes, such as the planning to a `Planner`, and the execution to a `PlanExecutioner`. By having interfaces abstracting their implementations, it's easy to add new strategies of planning and execution. `Planner`s must manipulate an `EditablePlan`, while `PlanExecutioner`s only require processing `ExecutablePlan`s, that's why the editable interface extends the executable one, and a `Plan` implements the editable one.\n\nThe result of a detection workflow is a `Report`, which is abstracted to opens the architecture for the adoption of the Decorator pattern, allowing the addition of behavior to a `Report` without changing the `BaseReport` class. \n\n![class diagram of the report generation](./../diagrams/usvision-docs-classes_reports.png)\n",
      "format" : "Markdown",
      "id" : "9",
      "title" : "Detections can be required in a granular way",
      "date" : "2023-10-17T00:00:00Z",
      "status" : "Accepted",
      "links" : [ {
        "id" : "10",
        "description" : "Improved by"
      } ]
    }, {
      "content" : "# 10. User can specify a preset\n\nDate: 2023-10-17\n\n## Status\n\nAccepted\n\nImproves [9. Detections can be required in a granular way](#9)\n\nImproved by [11. Presets treated as configuration instead of code](#11)\n\n## Context\n\nWith multiple possibilities, it can become hard -- or boring -- to select the detections to run.\n\n## Decision\n\nUser can specify a preset of detections.\n\n## Consequences\n\nUsers need to have access to the currently available presets.\nSupporting presets requires pre-processing requests.\n\n## Creating a new preset\n\nThe `ReportSupervisor` has a map that translates a preset name into a set of detector names. To create a new preset, all it takes is to add a new record to this map.\n",
      "format" : "Markdown",
      "id" : "10",
      "title" : "User can specify a preset",
      "date" : "2023-10-17T00:00:00Z",
      "status" : "Accepted",
      "links" : [ {
        "id" : "9",
        "description" : "Improves"
      }, {
        "id" : "11",
        "description" : "Improved by"
      } ]
    } ]
  },
  "views" : {
    "configuration" : {
      "branding" : { },
      "styles" : { },
      "terminology" : { }
    }
  }
}